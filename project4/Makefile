# Makefile for first
CC = gcc
LFLAGS = -lm -lpthread 
CFLAGS =
SRC = src/
BIN = bin/
benford_sequential :	$(SRC)benford_sequential.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_sequential $(SRC)benford_sequential.c $(LFLAGS)
	./$(BIN)benford_sequential

benford_sequential_val :	$(SRC)benford_sequential.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_sequential $(SRC)benford_sequential.c $(LFLAGS)
	valgrind ./$(BIN)benford_sequential





benford_parallel_A :	$(SRC)benford_parallel_A.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_A $(SRC)benford_parallel_A.c $(LFLAGS)
	./$(BIN)benford_parallel_A

benford_parallel_A_val :	$(SRC)benford_parallel_A.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_A $(SRC)benford_parallel_A.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_A




benford_parallel_B :	$(SRC)benford_parallel_B.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_B $(SRC)benford_parallel_B.c $(LFLAGS)
	./$(BIN)benford_parallel_B

benford_parallel_B_val :	$(SRC)benford_parallel_B.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_B $(SRC)benford_parallel_B.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_B




benford_parallel_C :	$(SRC)benford_parallel_C.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_C $(SRC)benford_parallel_C.c $(LFLAGS)
	./$(BIN)benford_parallel_C

benford_parallel_C_val :	$(SRC)benford_parallel_C.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_C $(SRC)benford_parallel_C.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_C




benford_parallel_D :	$(SRC)benford_parallel_D.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_D $(SRC)benford_parallel_D.c $(LFLAGS)
	./$(BIN)benford_parallel_D

benford_parallel_D_val :	$(SRC)benford_parallel_D.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_D $(SRC)benford_parallel_D.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_D



benford_parallel_E_1 :	$(SRC)benford_parallel_E_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1 $(SRC)benford_parallel_E_1.c $(LFLAGS)
	./$(BIN)benford_parallel_E_1

benford_parallel_E_1_val :	$(SRC)benford_parallel_E_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1 $(SRC)benford_parallel_E_1.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_E_1




benford_parallel_E_1_No_False_1 :	$(SRC)benford_parallel_E_1_No_False_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1_No_False_1 $(SRC)benford_parallel_E_1_No_False_1.c $(LFLAGS)
	./$(BIN)benford_parallel_E_1_No_False_1

benford_parallel_E_1_No_False_1_val :	$(SRC)benford_parallel_E_1_No_False.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1_No_False_1 $(SRC)benford_parallel_E_1_No_False_1.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_E_1_No_False_1



benford_parallel_E_1_No_False_2 :	$(SRC)benford_parallel_E_1_No_False_2.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1_No_False_2 $(SRC)benford_parallel_E_1_No_False_2.c $(LFLAGS)
	./$(BIN)benford_parallel_E_1_No_False_2

benford_parallel_E_1_No_False_2_val :	$(SRC)benford_parallel_E_1_No_False_2.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_1_No_False_2 $(SRC)benford_parallel_E_1_No_False_2.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_E_1_No_False_2



benford_parallel_E_2 :	$(SRC)benford_parallel_E_2.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_2 $(SRC)benford_parallel_E_2.c $(LFLAGS)
	./$(BIN)benford_parallel_E_2

benford_parallel_E_2_val :	$(SRC)benford_parallel_E_2.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_E_2 $(SRC)benford_parallel_E_2.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_E_2




benford_parallel_F_1 :	$(SRC)benford_parallel_F_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_F_1 $(SRC)benford_parallel_F_1.c $(LFLAGS)
	./$(BIN)benford_parallel_F_1

benford_parallel_F_1_val :	$(SRC)benford_parallel_F_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_F_1 $(SRC)benford_parallel_F_1.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_F_1



benford_parallel_F_2 :	$(SRC)benford_parallel_F_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_F_2 $(SRC)benford_parallel_F_2.c $(LFLAGS)
	./$(BIN)benford_parallel_F_2

benford_parallel_F_2_val :	$(SRC)benford_parallel_F_1.c $(SRC)my_timing.o
	$(CC) $(CFLAGS) $(SRC)my_timing.o -o $(BIN)benford_parallel_F_2 $(SRC)benford_parallel_F_2.c $(LFLAGS)
	valgrind ./$(BIN)benford_parallel_F_2



clean :
	rm -rf *~ *.o benford_sequential benford_parallel_A benford_parallel_B benford_parallel_C benford_parallel_D benford_parallel_E_1 benford_parallel_E_2 benford_parallel_F_1 benford_parallel_F_2

# Inference rules
%.o : %.c
	$(CC) $(CFLAGS)-c -o $@ $^
